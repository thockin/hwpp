Testing stuff:
 - link against a good memory debugger
 - test field lookup() methods
 - tests do not need to be built static

Device stuff:
 - fix and finish PCI subclass and progintf stuff
 - make PCI capabilities be self-contained to closer emulate the final language
 - allow anonymous registers, such as READ(BITS(REG32(0x100)))
   maybe change everything to
   	EXPORT("%foo", REG32(0x100))
   or
   	NAME("%foo", REG32(0x100))
 - switch to push/pop context
 - figure out how to do common MSRs (like MTRR)
 - is there a well-known CPU place or does Opteron have to take that
   over, too?

Driver stuff:
 - remove the length arg of io/mem bindings? else report PCI BAR sizes
 - add do_error() for non-io-errors
 - strerror() in driver read/write errors

Code stuff:
 - create and use namespace pp::
 - capitalize PP_foo or PP_Foo or PpFoo for types?
 - move more code to .cpp files
 - move datatypes.h to a .cpp
 - pp_exception: http://marknelson.us/2007/11/13/no-exceptions/
 - make pp_path::invalid be a subclas of parse_error?
 - put all fkl_ functions into a namespace?
 - put all fake_language into a namespace?

Build stuff:
 - write DEFS and other stuff to a dotfile and make that a makefile dependency
 - prep from cross-compile and hermetic builds

Docs stuff:
 - write fake_language spec
 - write overview doc

Bugs and features:
 - all FIXMEs
 - preserve/set/clear flags for registers
 - better errors on datatypes
 - some MSIX access kill the system in !msi_enabled.  Figure out why
   and what the right heuristic is.
 - allow enum default values if value is out-of-bounds
 	- PCI vendor
 - enums with duplicate names
 	- pcie_capability_t vchannel vs vc2
	- pcie_link_speed_t 0 vs 1
 - import the public PCI repository into a vendor enum (and device?)
 - pp_enum::lookup() throws an exception, but evaluate() doesn't
 - pp_scope::resolve_datatype() should throw, rather than return NULL;
 - pp_context and current context is awful
 	- all the scope wrappers - just go to the scope directly!
 - PP_WARN should pass control to an app-specific stream, if the app cares
 - provide a foo{bar} syntax rather than foo.bar (pp_hash)
 - is array[$] really needed - is [] not good enough as an rval?

filesystem.h:
	track full path name in directory and direntry
		- enables direntry->open() := file::open(direntry->path)
	directory iterators
		- needs direntry comparison
	fs::realpath()
