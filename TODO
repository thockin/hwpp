link against a good memory debugger

Fix and finish PCI subclass and progintf stuff

preserve/set/clear flags for registers

create and use namespace pp::
test lookup() methods
capitalize PP_foo for types?
scope merge for anon scopes
space::bind() method?
pp_enum -> pp_enum_type, etc

FIXMEs

move more code to .cpp files

remove the length arg of io/mem bindings? else report PCI BAR sizes

write DEFS and other stuff to a dotfile and make that a makefile dependency

write docs

filter_field(regbits, procs) or maybe filter_type(real_type, procs)
strerror() in driver read/write errors
drivers: add do_error() for non-io-errors
use one comment style everywhere

allow anonymous registers, such as READ(BITS(REG32(0x100)))
  - maybe change everything to
  	EXPORT("%foo", REG32(0x100))
  or
  	NAME("%foo", REG32(0x100))

// comments for pp_scope and pp_path
better errors on datatypes
parse datatype names (boost::regex)
parse enum and bitmask stings (boost::regex)

are carats allowed mid-path?  not currently

make PCI capabilities be self-contained to closer emulate the final language

filesystem.h:
	track full path name in directory and direntry
		- enables direntry->open() := file::open(direntry->path)
	directory iterators
		- needs direntry comparison
	fs::realpath()

fix 'make clean' rules to include OBJS

BUG: some MSIX access kill the system in !msi_enabled.  Figure out why and
what the right heuristic is.

enum defaults
enums with duplicate names - pcie_capability_t

prep from cross-compile and hermetic builds
do my own simple regex class?

tests do not need to be built static
