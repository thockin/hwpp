Testing stuff:
 - link against a good memory debugger
 - test field lookup() methods
 - tests do not need to be built static

Device stuff:
 - fix and finish PCI subclass and progintf stuff
 - make PCI capabilities be self-contained to closer emulate the final language
 - allow anonymous registers, such as READ(BITS(REG32(0x100)))
   maybe change everything to
   	EXPORT("%foo", REG32(0x100))
   or
   	NAME("%foo", REG32(0x100))
 - switch to push/pop context
 - when to use yesno vs enabledisable vs truefalse ?  Be consistent
 - make a decision on "for (int addr = 0x40; i < 0x60; i += 4) {" vs
   unrolling via functions.
 - allow sub-regs (regbits-regs), for %eax %ebx, %ecx, %edx in cpuid?
 - convert address into a list?
   - add "regaddr_t" type to print them

Driver stuff:
 - remove the length arg of io/mem bindings? else report PCI BAR sizes
 - add do_error() for non-io-errors
 - strerror() in driver read/write errors

Code stuff:
 - create and use namespace pp::
 - capitalize PP_foo or PP_Foo or PpFoo for types?
 - move more code to .cpp files
 - move datatypes.h to a .cpp
 - pp_exception: http://marknelson.us/2007/11/13/no-exceptions/
 - make pp_path::invalid be a subclas of parse_error?
 - put all fkl_ functions into a namespace?
 - put all fake_language into a namespace?
 - pp_format same as pp_lambda - in it's own header
 - decide on what can be in an enum key and make them more readable (and
   writable)
 - are field/reg name restrictions pointless?
 - enforce % on registers but not fields

Bugs and features:
 - all FIXMEs
 - preserve/set/clear flags for registers
 - better errors on datatypes
 - some MSIX access kill the system in !msi_enabled.  Figure out why
   and what the right heuristic is.
 - allow enum default values if value is out-of-bounds
 	- PCI vendor
 - enums with duplicate names
 	- pcie_capability_t vchannel vs vc2
	- pcie_link_speed_t 0 vs 1
 - import the public PCI repository into a vendor enum (and device?)
 - pp_enum::lookup() throws an exception, but evaluate() doesn't
 - pp_scope::resolve_datatype() should throw, rather than return NULL;
 - pp_context and current context is awful
 	- all the scope wrappers - just go to the scope directly!
 - PP_WARN should pass control to an app-specific stream, if the app cares
 - provide a foo{bar} syntax rather than foo.bar (pp_hash)
 - drop INT(name) and HEX(name) and drop all ANON_ prefixes!
 - provide a way to write a string to a field?
 	- WRITE("field", string) ?
 	- WRITE("field", LOOKUP("field", string)) ?
 - Can I provide a more consistent model of strings vs values?
 - proc scopes ?  Might require anonymous scopes
 - can a binding have no args?
 - proc_dirents (run a proc to see if the dirent exists?)
 - accessing an array as "foo" should be the same as "foo[0]" ??
 - fixed-point datatype
 - add ALIAS to symlink to dirents
 - add altnames for registers and fields (to unify naming?)
 - drop "ANON" prefixes for types
 - unify array[] and [$] syntax
 - bindings on registers
 - anonymous registers

filesystem.h:
	mmap: closing the FD does no unmap an mmap!!  Use this.
	track full path name in directory and direntry
		- enables direntry->open() := file::open(direntry->path)
	directory iterators
		- needs direntry comparison
	fs::realpath()

Open large-scale issues:
	- per-field xforms?
	- unify registers and fields to just be value objects?
		- read() and write()
		- named attributes
