Testing stuff:
 - link against a good memory debugger
 - test field lookup() methods
 - tests do not need to be built static

Device stuff:
 - fix and finish PCI subclass and progintf stuff
 - make PCI capabilities be self-contained to closer emulate the final language
 - filter_field(regbits, procs) or maybe filter_type(real_type, procs)
 - allow anonymous registers, such as READ(BITS(REG32(0x100)))
   maybe change everything to
   	EXPORT("%foo", REG32(0x100))
   or
   	NAME("%foo", REG32(0x100))

Driver stuff:
 - remove the length arg of io/mem bindings? else report PCI BAR sizes
 - add do_error() for non-io-errors
 - strerror() in driver read/write errors

Code stuff:
 - create and use namespace pp::
 - capitalize PP_foo for types?
 - pp_enum -> pp_enum_type, etc
 - move more code to .cpp files
 - use // comments for pp_scope and pp_path

Build stuff:
 - write DEFS and other stuff to a dotfile and make that a makefile dependency
 - prep from cross-compile and hermetic builds

Docs stuff:
 - write fake_language spec
 - write overview doc

Bugs and features:
 - all FIXMEs
 - scope merge to allow anon scopes
 - preserve/set/clear flags for registers
 - better errors on datatypes
 - do my own simple regex class?
 - validate datatype names (regex)
 - validate enum and bitmask stings (regex)
 - are carats allowed mid-path?  not currently
 - some MSIX access kill the system in !msi_enabled.  Figure out why
   and what the right heuristic is.
 - allow enum default values if value is out-of-bounds
 - enums with duplicate names - e.g. pcie_capability_t

filesystem.h:
	track full path name in directory and direntry
		- enables direntry->open() := file::open(direntry->path)
	directory iterators
		- needs direntry comparison
	fs::realpath()
